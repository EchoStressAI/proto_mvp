version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    ports:
       - 5672:5672
       - 15672:15672

  llamaserver:
    image: ghcr.io/ggerganov/llama.cpp:server
    container_name: llamaserver
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./models:/models
    command: >
      -m /models/llama_1b_q8_0.gguf
      --port 8000
      --host 0.0.0.0
      -n 512

  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: echodatabase
    ports:
      - "5430:5432"
    volumes:
      - ./data/pg_data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    secrets:
      - postgres_password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dbuser -d echodatabase" ]
      interval: 10s
      retries: 5
      start_period: 5s


  web-server:
    build: ./websrv
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
    restart: always
    environment:
      FLASK_PORT: 5000
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 10s
      timeout: 5s
      retries: 5

  video2sound:
    build: ./vid2snd
    volumes:
      - ./data:/app/data
    restart: always
    depends_on:
      - rabbitmq
      - web-server

  asr:
    build: ./asr
    restart: always
    volumes:
      - ./models:/app/onnx
      - ./data:/app/data
    environment:
      MODEL_TYPE: ctc
      ONNX_DIR: onnx
    depends_on:
      - rabbitmq
      - web-server
      - video2sound



  audfeat:
    build: ./audfeat
    restart: always
    volumes:
      - ./data:/app/data
    depends_on:
      - rabbitmq
      - web-server
      - video2sound

  logger:
    build: ./dblogger
    restart: always
    volumes:
      - ./data:/app/data

    environment:
      DB_HOST: postgres
      DB_NAME: echodatabase
      DB_USER: dbuser
      DB_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password

    depends_on:
      - rabbitmq
      - web-server
      - video2sound
      - asr
      - audfeat


  textemo:
    build: ./textemo
    restart: always
    volumes:
      - ./models/emotext:/app/model
    depends_on:
      - rabbitmq
      - web-server
      - video2sound
      - asr

  main:
    build: ./main
    restart: always
    volumes:
      - ./data:/app/data
    depends_on:
      - rabbitmq
      - web-server
      - video2sound
      - asr
      - llamaserver


  tts:
    build: ./tts
    restart: always
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    environment:
      SPEAKER: xenia
      SAMPLE_RATE: 48000
    depends_on:
      - rabbitmq
      - web-server
      - video2sound
      - asr
      - main


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana-storage:/var/lib/grafana

  nodeexplorer:
    image: quay.io/prometheus/node-exporter:latest
    container_name: nodeexplorer
    restart: always
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro



secrets:
  postgres_password:
    file: ./secrets/postgres_password

